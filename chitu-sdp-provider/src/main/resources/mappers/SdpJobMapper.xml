<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chitu.bigdata.sdp.mapper.SdpJobMapper">
    <resultMap id="BaseResultMap" type="com.chitu.bigdata.sdp.api.model.SdpJob">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="job_name" jdbcType="VARCHAR" property="jobName"/>
        <result column="job_content" jdbcType="LONGVARCHAR" property="jobContent"/>
        <result column="config_content" jdbcType="LONGVARCHAR" property="configContent"/>
        <result column="source_content" jdbcType="LONGVARCHAR" property="sourceContent"/>
        <result column="data_stream_config" jdbcType="LONGVARCHAR" property="dataStreamConfig"/>
        <result column="running_version" jdbcType="VARCHAR" property="runningVersion"/>
        <result column="latest_version" jdbcType="VARCHAR" property="latestVersion"/>
        <result column="project_id" jdbcType="BIGINT" property="projectId"/>
        <result column="file_id" jdbcType="BIGINT" property="fileId"/>
        <result column="business_flag" jdbcType="VARCHAR" property="businessFlag"/>
        <result column="enabled_flag" jdbcType="TINYINT" property="enabledFlag"/>
        <result column="trace_id" jdbcType="VARCHAR" property="traceId"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
        <result column="creation_date" jdbcType="TIMESTAMP" property="creationDate"/>
        <result column="updation_date" jdbcType="TIMESTAMP" property="updationDate"/>
        <result column="priority" jdbcType="TINYINT" property="priority"/>
    </resultMap>

    <resultMap id="ResultMap" type="com.chitu.bigdata.sdp.api.vo.JobResp">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="job_name" jdbcType="VARCHAR" property="jobName"/>
        <result column="job_status" jdbcType="VARCHAR" property="jobStatus"/>
        <result column="job_content" jdbcType="LONGVARCHAR" property="jobContent"/>
        <result column="flink_url" jdbcType="VARCHAR" property="flinkUrl"/>
        <result column="config_content" jdbcType="LONGVARCHAR" property="configContent"/>
        <result column="source_content" jdbcType="LONGVARCHAR" property="sourceContent"/>
        <result column="data_stream_config" jdbcType="LONGVARCHAR" property="dataStreamConfig"/>
        <result column="running_version" jdbcType="VARCHAR" property="runningVersion"/>
        <result column="latest_version" jdbcType="VARCHAR" property="latestVersion"/>
        <result column="project_id" jdbcType="BIGINT" property="projectId"/>
        <result column="file_id" jdbcType="BIGINT" property="fileId"/>
        <result column="enabled_flag" jdbcType="TINYINT" property="enabledFlag"/>
        <result column="trace_id" jdbcType="VARCHAR" property="traceId"/>
        <result column="created_by" jdbcType="VARCHAR" property="createdBy"/>
        <result column="updated_by" jdbcType="VARCHAR" property="updatedBy"/>
        <result column="creation_date" jdbcType="TIMESTAMP" property="creationDate"/>
        <result column="updation_date" jdbcType="TIMESTAMP" property="updationDate"/>
        <result column="cpu_core" jdbcType="VARCHAR" property="cpuCore"/>
        <result column="memory_gb" jdbcType="VARCHAR" property="memoryGb"/>
        <result column="is_new_version" jdbcType="TINYINT" property="isNewVersion"/>
        <result column="expect_status" jdbcType="VARCHAR" property="expectStatus"/>
        <result column="file_type" jdbcType="VARCHAR" property="fileType"/>
        <result column="parallelism" jdbcType="VARCHAR" property="parallelism"/>
        <result column="slots" jdbcType="VARCHAR" property="slots"/>
        <result column="folder_id" jdbcType="BIGINT" property="folderId"/>
        <result column="full_path" jdbcType="VARCHAR" property="fullPath"/>
        <result column="project_name" jdbcType="VARCHAR" property="projectName"/>
        <result column="employee_number" jdbcType="VARCHAR" property="employeeNumber"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="priority" jdbcType="TINYINT" property="priority"/>
        <result column="engine_cluster" jdbcType="VARCHAR" property="engineCluster"/>
        <result column="engine_type" jdbcType="VARCHAR" property="engineType"/>
    </resultMap>

    <resultMap id="ResultDetailMap" type="com.chitu.bigdata.sdp.api.model.SdpJob" extends="BaseResultMap">
        <association property="project" javaType="com.chitu.bigdata.sdp.api.model.SdpProject">
            <id column="project_id" property="id"/>
            <result column="project_name" property="projectName"/>
        </association>
        <association property="jobInstance" javaType="com.chitu.bigdata.sdp.api.model.SdpJobInstance">
            <id column="instance_id" property="id"/>
            <result column="flink_job_id" property="flinkJobId"/>
            <result column="job_status" property="jobStatus"/>
            <result column="start_time" property="startTime"/>
        </association>
        <collection property="jobAlertRuleList" ofType="com.chitu.bigdata.sdp.api.model.SdpJobAlertRule">
            <id column="rule_id" jdbcType="INTEGER" property="id"/>
            <result column="job_id" jdbcType="BIGINT" property="jobId"/>
            <result column="rule_generate_type" jdbcType="VARCHAR" property="ruleGenerateType"/>
            <result column="rule_name" jdbcType="VARCHAR" property="ruleName"/>
            <result column="rule_desc" jdbcType="VARCHAR" property="ruleDesc"/>
            <result column="index_name" jdbcType="VARCHAR" property="indexName"/>
            <result column="rule_content" jdbcType="VARCHAR" property="ruleContent"/>
            <result column="effective_time" jdbcType="VARCHAR" property="effectiveTime"/>
            <result column="alert_rate" jdbcType="INTEGER" property="alertRate"/>
            <result column="notifi_type" jdbcType="VARCHAR" property="notifiType"/>
            <result column="notify_users" jdbcType="VARCHAR" property="notifyUsers"/>
            <result column="effective_state" jdbcType="VARCHAR" property="effectiveState"/>
        </collection>
    </resultMap>

    <sql id="BaseTable">
        sdp_job
    </sql>

    <!--废弃-->
    <insert id="insertOrUpdate" parameterType="com.chitu.bigdata.sdp.api.model.SdpJob">
        insert into sdp_job(job_name, job_content, config_content, source_content, latest_version,
                            project_id, file_id, enabled_flag, created_by, updated_by, creation_date, updation_date)
        values (#{jobName}, #{jobContent}, #{configContent}, #{sourceContent}, #{latestVersion},
                #{projectId}, #{fileId}, 1, #{createdBy}, #{updatedBy}, CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP) on duplicate key
        update
            job_name = #{jobName},
            job_content = #{jobContent},
            config_content = #{configContent},
            source_content = #{sourceContent},
            latest_version = #{latestVersion},
            project_id = #{projectId},
            file_id = #{fileId},
            enabled_flag = #{enabledFlag},
            updated_by = #{updatedBy},
            updation_date = CURRENT_TIMESTAMP
    </insert>

    <select id="searchJob" parameterType="com.chitu.bigdata.sdp.api.bo.SdpJobBO" resultType="java.lang.String">
        select job_name from sdp_job
        where enabled_flag = 1
        <if test="vo.projectId != null">
            and project_id = #{vo.projectId}
        </if>
        <if test="vo.jobName != null and vo.jobName != ''">
            and job_name like concat('%',#{vo.jobName},'%')
        </if>
    </select>

    <select id="selectLists" parameterType="com.chitu.bigdata.sdp.api.bo.SdpJobBO" resultMap="BaseResultMap">
        select sj.id,sj.job_name from sdp_job sj
        inner join sdp_job_instance sji on sj.id = sji.job_id and sji.enabled_flag = 1 and is_latest = 1
        <where>
            <if test="vo.projectId != null">
                and sj.project_id = #{vo.projectId}
            </if>
            <if test="vo.jobName != null and vo.jobName != ''">
                and sj.job_name like concat('%',#{vo.jobName},'%')
            </if>
        </where>
    </select>

    <select id="queryJob4Delete" parameterType="java.util.List" resultMap="BaseResultMap">
        select sj.id,sj.job_name,sji.raw_status
        from sdp_job sj
        left join sdp_job_instance sji on sj.id = sji.job_id and sji.enabled_flag = 1 and sji.is_latest = 1 and
        sj.running_version = sji.job_version
        where sj.enabled_flag = 1
        and sji.raw_status in ("STARTING","RESTARTING","INITIALIZING","CREATED","RECONCILING","RUNNING")
        and sj.id in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>

    <update id="disables" parameterType="java.util.List">
        update sdp_job set enabled_flag = 0 ,running_version = null where id in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <select id="queryJob4Compare" resultMap="BaseResultMap">
        select *
        from sdp_job
        where enabled_flag = 1
          and file_id = #{fileId}
    </select>

    <update id="rollback" parameterType="com.chitu.bigdata.sdp.api.model.SdpJob">
        update sdp_job
        set job_content     = #{jobContent},
            config_content  = #{configContent},
            source_content  = #{sourceContent},
            running_version = #{runningVersion},
            updated_by      = #{updatedBy},
            updation_date   = CURRENT_TIMESTAMP
        where file_id = #{fileId}
    </update>

    <select id="queryJob" parameterType="com.chitu.bigdata.sdp.api.bo.SdpJobBO" resultMap="ResultMap">
        select
        distinct
        sj.id,
        sj.job_name,
        sji.job_status,
        sji.expect_status,
        case when sj.running_version is null then sj.latest_version
        else sj.running_version end as running_version,
        sj.latest_version,
        sji.flink_url,
        sj.project_id,
        sj.updation_date,
        su.user_name as updated_by,
        sf.file_type,
        json_extract(sj.source_content, '$.taskManagerCpu') as cpu_core,
        json_extract(sj.source_content, '$.taskManagerMem') as memory_gb,
        json_extract(sj.source_content, '$.parallelism') as parallelism,
        sj.config_content,
        case when running_version is null and latest_version ='v1' then 0
        when running_version is null and latest_version !='v1' then 1
        when running_version = latest_version then 0 else 1 end as is_new_version,
        sj.file_id,
        sf.folder_id as folder_id,
        ifnull(sj.priority,2) as priority,
        se.engine_cluster,
        se.engine_type
        from sdp_job sj
        inner join sdp_job_instance sji on sj.id = sji.job_id and sji.enabled_flag = 1 and is_latest = 1
        inner join sdp_engine se on se.id = json_extract(sj.config_content, '$.engineId') and se.enabled_flag = 1
        left join sdp_file sf on sf.id = sj.file_id and sf.enabled_flag = 1
        left join sdp_user su on su.id = sj.updated_by and su.enabled_flag = 1
        where sj.enabled_flag = 1
        <if test="criteria.vo.jobName != null and criteria.vo.jobName != ''">
            AND sj.job_name like CONCAT('%', #{criteria.vo.jobName, jdbcType=VARCHAR},'%')
        </if>
        <if test="criteria.vo.updatedBy != null and criteria.vo.updatedBy != '' ">
            AND sj.updated_by = #{criteria.vo.updatedBy, jdbcType=VARCHAR}
        </if>
        <if test="criteria.vo.searchParams != null and criteria.vo.searchParams.size()>0 ">
            AND sji.job_status in
            <foreach collection="criteria.vo.searchParams" item="jobStatus" separator="," open="(" close=")">
                #{jobStatus}
            </foreach>
        </if>
        <if test="criteria.vo.projectId != null ">
            AND sj.project_id = #{criteria.vo.projectId, jdbcType=BIGINT}
        </if>
        <if test="criteria.vo.folderIds != null and criteria.vo.folderIds.size() > 0">
            AND sf.folder_id in
            <foreach collection="criteria.vo.folderIds" item="folderId" separator="," open="(" close=")">
                #{folderId, jdbcType=BIGINT}
            </foreach>
        </if>
        <if test="criteria.vo.prioritys != null ">
            AND sj.priority in
            <foreach collection="criteria.vo.prioritys.split(',')" item="priority" separator="," open="(" close=")">
                #{priority,jdbcType=INTEGER}
            </foreach>
        </if>
        <if test="criteria.vo.prioritys != null ">
            AND sj.priority in
            <foreach collection="criteria.vo.prioritys.split(',')" item="priority" separator="," open="(" close=")">
                #{priority,jdbcType=INTEGER}
            </foreach>
        </if>
        <if test="criteria != null and criteria.orderByClauses != null ">
            <if test="criteria != null and criteria.orderByClauses != null ">
                <trim prefix=" ORDER  BY " suffix="  " suffixOverrides=",">
                    <foreach collection="criteria.orderByClauses" item="orderByObj">
                        <if test="orderByObj.field != null and orderByObj.field != ''">
                            <if test="orderByObj.orderByMode == 0">
                                #{orderByObj.field} ASC ,
                            </if>
                            <if test="orderByObj.orderByMode != 0">
                                #{orderByObj.field} DESC ,
                            </if>
                        </if>
                    </foreach>
                </trim>
            </if>
        </if>
    </select>

    <select id="queryJobByFileId" resultMap="BaseResultMap">
        select *
        from sdp_job
        where enabled_flag = 1
          and file_id = #{fileId}
    </select>

    <select id="queryReferenceJobs" parameterType="com.chitu.bigdata.sdp.api.bo.SdpJarBO" resultMap="BaseResultMap" flushCache="true" useCache="false">
        select job.job_name from (
        select sj.job_name,
        json_extract(ifnull(sj.data_stream_config,sj.config_content),'$.jarId') as jar_id,
        json_extract(ifnull(sj.data_stream_config,sj.config_content),'$.jarName') as jar_name,
        json_extract(ifnull(sj.data_stream_config,sj.config_content),'$.jarVersion') as jar_version
        from sdp_job sj inner join sdp_job_instance sji on sj.id = sji.job_id and sj.enabled_flag = 1 and
        sji.enabled_flag = 1 and sji.is_latest = 1
        where sj.project_id = #{projectId}
        ) job
        inner join sdp_jar jar on jar.name = job.jar_name and jar.version = job.jar_version
        <where>
            jar.enabled_flag = 1
            and jar.project_id = #{projectId}
            <if test="name != null and name != ''">
                and jar.name = #{name}
            </if>
            <if test="version != null and version != ''">
                and jar.version = #{version}
            </if>
        </where>
    </select>

    <select id="getRunningStatusJob" resultMap="ResultDetailMap">
        select
        t1.id,
        t1.job_name,
        t1.project_id,
        t1.file_id,
        t2.id as instance_id,
        t2.flink_job_id,
        t2.job_status,
        t2.start_time,
        t3.id,
        t3.project_name,
        t4.id as rule_id,
        t4.job_id,
        t4.rule_generate_type,
        t4.rule_name,
        t4.rule_desc,
        t4.index_name,
        t4.rule_content,
        t4.effective_time,
        t4.alert_rate,
        t4.notifi_type,
        t4.notify_users,
        t4.effective_state
        from
        sdp_job t1
        join sdp_job_instance t2
        on t1.id = t2.job_id
        join sdp_project t3
        on t1.project_id = t3.id
        join sdp_job_alert_rule t4
        on t1.id = t4.job_id
        <where>
            t1.enabled_flag = 1 and t2.enabled_flag = 1 and t3.enabled_flag = 1 and t4.enabled_flag = 1
            and t2.is_latest = 1 and t2.job_status = 'RUNNING'
        </where>
    </select>

    <select id="selectUpdatedBy" resultMap="BaseResultMap">
        select
        distinct
        su.id as id,
        su.user_name as updated_by
        from sdp_job sj
        inner join sdp_job_instance sji on sj.id = sji.job_id and sji.enabled_flag = 1 and is_latest = 1
        inner join sdp_user su on sj.updated_by = su.id and su.enabled_flag = 1
        where sj.enabled_flag = 1
        <if test="projectId != null and projectId != ''">
            and sj.project_id = #{projectId, jdbcType=VARCHAR}
        </if>
    </select>

    <select id="queryJob4Notify" resultMap="ResultMap">
        select sp.project_name, sj.job_name, su.user_name updated_by, su.employee_number,su.email, sj.updation_date
        from sdp_job sj
                 inner join sdp_project sp on sp.id = sj.project_id and sp.enabled_flag = 1
                 inner join sdp_user su on su.id = sj.updated_by and su.enabled_flag = 1
        where sj.enabled_flag = 1
          and sj.file_id = #{fileId}
    </select>

    <select id="countJob" resultType="integer">
        SELECT COUNT(distinct (aj.job_name))
        FROM `sdp_job` AS aj LEFT JOIN `sdp_meta_table_relation` AS sds ON aj.file_id = sds.file_id
        where sds.data_source_id = #{datasourceId} AND aj.enabled_flag=1 AND sds.enabled_flag=1
        <if test="jobName != null and jobName != ''">
            and  aj.job_name like CONCAT('%',#{jobName,jdbcType=VARCHAR},'%')
        </if>
    </select>

    <select id="JobListByDataSource" parameterType="com.chitu.bigdata.sdp.api.bo.SdpDataSourceBO" resultType="com.chitu.bigdata.sdp.api.vo.DatasourceJobInf">
        select distinct
               sp.project_name  as projectName,
               sj.job_name      as jobName,
               su.user_name     as updatedBy,
               sj.updation_date as updationDate,
               sj.id,
               sj.file_id as fileId,
               sf.folder_id as folderId
        from sdp_job sj
                 LEFT JOIN sdp_user su on sj.updated_by = su.id and su.enabled_flag = 1
                 LEFT JOIN `sdp_meta_table_relation` sds ON sds.file_id=sj.file_id and sds.enabled_flag = 1
                 left join sdp_project sp on sj.project_id = sp.id and sp.enabled_flag = 1
                 left join sdp_file sf on sj.file_id=sf.id and sf.enabled_flag = 1
        where sj.project_id = #{projectId} and sds.data_source_id=#{id} and sj.enabled_flag=1
        <if test="jobName != null and jobName != ''">
            and  sj.job_name like CONCAT('%',#{jobName,jdbcType=VARCHAR},'%')
        </if>
        order by sj.updation_date desc
    </select>

    <select id="queryByPriority" resultMap="BaseResultMap">
        select * from sdp_job
        where enabled_flag = 1
        and project_id = #{id}
        priority = #{priority}
    </select>

    <select id="queryJobById" resultMap="ResultMap">
        select sj.job_name,sj.updated_by,sj.project_id,sp.project_name
        from sdp_job sj
        inner join sdp_project sp on sp.id = sj.project_id and sp.enabled_flag = 1
        where sj.enabled_flag = 1
        and sj.id = #{jobId}
    </select>


    <select id="getJobByIds" resultMap="BaseResultMap">
        select id,config_content,project_id,job_name from sdp_job where id in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </select>
</mapper>